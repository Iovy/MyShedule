using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Yogesh.ExcelXml;
using System.Windows.Forms;
using System.IO;

namespace MyShedule
{
    class XLSExporter
    {
        public List<string> NameElements;
        public SheduleWeeks shedule;
        public View view;
        ExcelXmlWorkbook book;

        public void Export()
        {
            foreach (string name in NameElements)
            {
                //wordDocument.SetPageNumbering(1);

                //WriteHeaderReport();

                // Создаем таблицу для поставщика
                book = new ExcelXmlWorkbook();
                Worksheet sheet = book[0];

               // string sheetName = frmSave.FileName.ToString();
                //sheet.Name = sheetName.Substring(sheetName.LastIndexOf("\\") + 1,
                   // sheetName.IndexOf(".") - sheetName.LastIndexOf("\\") - 1);

                sheet.FreezeTopRows = 1;
                //sheet.FreezeLeftColumns = 2;

                sheet.PrintOptions.Orientation = PageOrientation.Landscape;
                sheet.PrintOptions.SetMargins(0.5, 0.4, 0.5, 0.4);
                AlignmentOptionsBase alOpt = (AlignmentOptionsBase)sheet.Alignment;
                alOpt.Horizontal = Yogesh.ExcelXml.HorizontalAlignment.Center;
                alOpt.ShrinkToFit = true;
                alOpt.Vertical = VerticalAlignment.Center;
                alOpt.WrapText = true;

                ////Записываем в ячейку
                SetTextHeaderTable(sheet, name);

                //table.SetFont(caption);
                SetWeeksHeaderTable(sheet);

                //table.SetFont(caption0);
                SetDaysTable(sheet, 1, 6, 1, 6);
                SetDaysTable(sheet, 1, 6, 37, 12);

                ////table.SetFont(normal);
                FillDaysNumbers(sheet, name);

                //table.SetFont(normal);
                //table.SaveToDocument(10000, 0);
            }

            CreateReport(book);
        }

        void FillDaysNumbers(Worksheet sheet, string name)
        {
            if (shedule == null)
                return;

            int monthStart = shedule.FirstDaySem.Month;

            List<SheduleLesson> tmp = shedule.GetLessonsByView(view, name).ToList();

            FillDays(sheet, monthStart, 1, tmp, Week.FirstWeek, Week.TreeWeek);
            FillDays(sheet, monthStart, 37, tmp, Week.SecondWeek, Week.FourWeek);

            FillLessons(sheet, monthStart, 1, tmp, Week.FirstWeek, Week.TreeWeek);
            FillLessons(sheet, monthStart, 37, tmp, Week.SecondWeek, Week.FourWeek);
        }

        void FillDays(Worksheet sheet, int monthStart, int row, List<SheduleLesson> tmp, Week week1, Week week2)
        {
            int column = 1;

            for (int counterDay = 1; counterDay <= 6; counterDay++)
            {
                column = 1;
                for (int counterMonth = monthStart; counterMonth < monthStart + 5; counterMonth++)
                {
                    List<int> numbers = (from x in shedule.Days
                                          from p in x.Dates
                                          where x.Day == (Day)counterDay &&
                                              p.Month == counterMonth && (x.Week == week1 || x.Week == week2)
                                          select p.Day).Distinct().OrderBy(e => e).ToList();

                    int k = 0;
                    foreach (int day in numbers)
                    {
                        sheet[column, row + k].Value += day.ToString();
                        k++;
                    }
                    column++;
                }
                row += 6;
            }
        }

        void FillLessons(Worksheet sheet, int monthStart, int row, List<SheduleLesson> tmp, Week week1, Week week2)
        {
            int column = 1;

            for (int counterDay = 1; counterDay <= 6; counterDay++)
            {
                column = 1;
                List<SheduleLesson> query1 = (from x in tmp
                                              from p in x.Dates
                                              where x.Day == (Day)counterDay && (x.Week == week1 || x.Week == week2)
                                              select x).ToList();

                List<int> Hours = (from x in query1 select x.Hour).Distinct().OrderBy(e => e).ToList();

                int k = 0;
                foreach (int hour in Hours)
                {
                    string str = "";
                    str = SheduleTime.GetHourDiscription(hour);
                    sheet[7, row + k].Value = str;
                    k++;
                }

                for (int i = 0; i < Hours.Count; i++)
                {
                    List<SheduleLesson> t1 = query1.Where(x => x.Hour == Hours[i] && x.Week == week1).ToList();
                    List<SheduleLesson> t2 = query1.Where(x => x.Hour == Hours[i] && x.Week == week2).ToList();

                    SheduleLesson lesson = (t1.Count > 0) ? t1.First() : null;
                    SheduleLesson lesson2 = (t2.Count > 0) ? t2.First() : null;

                    if (lesson != null && lesson2 != null && lesson.IsEqual(lesson2))
                    {
                        WriteLesson(sheet, row, lesson, false);


                        if (i + 1 < Hours.Count)
                        {
                            List<SheduleLesson> Next1 = query1.Where(x => x.Hour == Hours[i + 1] && x.Week == week1).ToList();
                            SheduleLesson next1 = (t1.Count > 0) ? t1.First() : null;

                            List<SheduleLesson> Next2 = query1.Where(x => x.Hour == Hours[i + 1] && x.Week == week2).ToList();
                            SheduleLesson next2 = (t1.Count > 0) ? t1.First() : null;


                            if (next1 != null && next2 != null && next1.IsEqual(next2) && lesson.IsEqual(next1))
                                i++;
                        }
                    }
                    else
                    {
                        if (lesson != null)
                        {

                            WriteLesson(sheet, row, lesson, true);

                            if (i + 1 < Hours.Count)
                            {
                                List<SheduleLesson> Next = query1.Where(x => x.Hour == Hours[i + 1] && x.Week == week1).ToList();
                                SheduleLesson next = (t1.Count > 0) ? t1.First() : null;

                                if (next != null && lesson.IsEqual(next))
                                    i++;
                            }
                        }

                        if (lesson2 != null)
                        {
                            WriteLesson(sheet, row, lesson2, true);

                            if (i + 1 < Hours.Count)
                            {
                                List<SheduleLesson> Next = query1.Where(x => x.Hour == Hours[i + 1] && x.Week == week2).ToList();
                                SheduleLesson next = (t1.Count > 0) ? t1.First() : null;

                                if (next != null && lesson.IsEqual(next))
                                    i++;
                            }
                        }
                    }

                }
                row+=6;
            }
        }

        void WriteLesson(Worksheet sheet, int row, SheduleLesson lesson, bool outdate)
        {
            string str = "";

            //0-я строчка
            if (view != View.Group)
            {
                str = lesson.GroupsDescription;
                sheet[8, row].Value = str;
                //table.Cell(row, 8).WriteLine();
            }

            //1-я строчка
            if (view == View.Discipline)
            {
                str += " (" + SheduleLessonType.Description(lesson.Type) + ")";
                sheet[8, row].Value = str;
                //table.Cell(row, 8).WriteLine();
            }
            else
            {
                str = lesson.Discipline + " (" + SheduleLessonType.Description(lesson.Type) + ")";
                sheet[8, row].Value = str;
                //table.Cell(row, 8).WriteLine();
            }

            //2-я строчка
            if (outdate)
            {
                str = lesson.DatesDescription;
                sheet[8, row].Value += str;
                //table.Cell(row, 8).WriteLine();
            }


            //3-я строчка
            if (view == View.Teacher)
            {
                str = lesson.Room;
                sheet[8, row].Value = str;
                //table.Cell(row, 8).WriteLine();
            }

            if (view == View.Room)
            {
                str = lesson.Teacher;
                sheet[8, row].Value = str;
                //table.Cell(row, 8).WriteLine();
            }

            if (view != View.Teacher && view != View.Room)
            {
                str = lesson.Teacher + " " + lesson.Room;
                sheet[8, row].Value += str;
                //table.Cell(row, 8).WriteLine();
            }
        }

        void SetWeeksHeaderTable(Worksheet sheet)
        {
            int i = 1;
            string week1 = "I" + Environment.NewLine + "Н Е Д Е Л Я";
            sheet[0,i].Value = week1;
            AlignmentOptionsBase alOptR = (AlignmentOptionsBase)sheet[0, i].Alignment;
            alOptR.Rotate = 90;

            Range range1 = new Range(sheet[0, i], sheet[0, (i + 5)*6]);
            range1.Merge();

            i += 6*6;

            string week2 = "II" + Environment.NewLine + "Н Е Д Е Л Я";

            sheet[0, i].Value = week2;
            alOptR = (AlignmentOptionsBase)sheet[0, i].Alignment;
            alOptR.Rotate = 90;

            Range range2 = new Range(sheet[0, i], sheet[0, i*2 - 2]);
            range2.Merge();
        }

        void SetTextHeaderTable(Worksheet sheet, string group)
        {
            sheet[0, 0].Value = "";

            int mountStart = shedule != null ? shedule.FirstDaySem.Month : 9;//сентябрь по умолчанию
            SetMonthsHeader(sheet, mountStart, 0, 1, 5);

            sheet[6, 0].Value = "День";
            sheet[7, 0].Value = "Часы";
            sheet[8, 0].Value = group;
        }

        void SetDaysTable(Worksheet sheet, int dayStart, int columnIndex, int rowIndexStart, int rowIndexEnd)
        {
            for (int counterRow = rowIndexStart, counterDay = dayStart; counterRow <= rowIndexEnd*6; counterRow+=6, counterDay++)
            {
                sheet[columnIndex, counterRow].Value = GetDayName(counterDay);
                AlignmentOptionsBase alOptR = (AlignmentOptionsBase)sheet[columnIndex, counterRow].Alignment;
                alOptR.Rotate = 90;

                Range range = new Range(sheet[columnIndex, counterRow], sheet[columnIndex, counterRow + 5]);
                range.Merge();
            }
        }

        private static string GetDayName(int dayNumber)
        {
            switch (dayNumber)
            {
                case 1: return "понедельник";
                case 2: return "вторник";
                case 3: return "среда";
                case 4: return "четверг";
                case 5: return "пятница";
                case 6: return "субота";
                case 7: return "воскресенье";
                default: return @"DAY N\A";
            }
        }

        void SetMonthsHeader(Worksheet sheet, int monthStart, int rowIndex, int columnIndexStart, int columnIndexEnd)
        {
            for (int counterClmn = columnIndexStart, counterMonth = monthStart; counterClmn <= columnIndexEnd; counterClmn++)
            {
                sheet[counterClmn, rowIndex].Value = GetMonthName(counterMonth);
                counterMonth = counterMonth == 12 ? 1 : counterMonth + 1;
                AlignmentOptionsBase alOptR = (AlignmentOptionsBase)sheet[counterClmn, rowIndex].Alignment;
                alOptR.Rotate = 90;
            }
        }

        string GetMonthName(int monthNumber)
        {
            switch (monthNumber)
            {
                case 1: return "январь";
                case 2: return "февраль";
                case 3: return "март";
                case 4: return "апрель";
                case 5: return "май";
                case 6: return "июнь";
                case 7: return "июль";
                case 8: return "август";
                case 9: return "сентябрь";
                case 10: return "октябрь";
                case 11: return "ноябрь";
                case 12: return "декабрь";
                default: return @"MOUTH N\A";
            }
        }

        void CreateReport(ExcelXmlWorkbook book)
        {
            SaveFileDialog frmSave = new SaveFileDialog();
            frmSave.Filter = "(*.xls)|*.xls";
            frmSave.FileName = "schedule1.xls";
            if (frmSave.ShowDialog() == DialogResult.OK && frmSave.FileName != "")
            {
                // Проверяем наличие файла
                if (File.Exists(frmSave.FileName) == true)
                {
                    try
                    {
                        File.Delete(frmSave.FileName);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                }

                book.Export(frmSave.FileName);
            }
        }
    }
}
